import subprocess
import platform
import os
import time
import tkinter as tk
from tkinter import Label

def get_ram_usage():
    try:
        output = subprocess.check_output(
            'wmic OS get FreePhysicalMemory,TotalVisibleMemorySize /format:list',
            shell=True
        ).decode().split("\n")
        free_mem = total_mem = 0
        for line in output:
            if "FreePhysicalMemory" in line:
                free_mem = int(line.split("=")[1]) // 1024
            elif "TotalVisibleMemorySize" in line:
                total_mem = int(line.split("=")[1]) // 1024
        used_mem = total_mem - free_mem
        return used_mem, total_mem
    except Exception:
        return 0, 0

def get_gpu_info():
    try:
        output = subprocess.check_output("wmic path Win32_VideoController get Name", shell=True).decode().strip().split("\n")
        return output[1].strip() if len(output) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
    except Exception:
        return "–ù–µ–≤—ñ–¥–æ–º–æ"

def get_os_info():
    return platform.system() + " " + platform.release()

def get_system_uptime():
    try:
        output = subprocess.check_output("wmic os get LastBootUpTime", shell=True).decode().strip().split("\n")
        boot_time = output[1].strip()[:14] if len(output) > 1 else ""
        if boot_time:
            from datetime import datetime
            boot_dt = datetime.strptime(boot_time, "%Y%m%d%H%M%S")
            uptime = (datetime.now() - boot_dt).total_seconds() // 3600
            return int(uptime)
        return 0
    except Exception:
        return 0

def update_info():
    used_ram, total_ram = get_ram_usage()
    uptime = get_system_uptime()
    
    ram_label.config(text=f"üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM: {used_ram} –ú–ë / {total_ram} –ú–ë")
    uptime_label.config(text=f"‚è≥ –ß–∞—Å —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏: {uptime} –≥–æ–¥–∏–Ω")
    
    root.after(1000, update_info)

root = tk.Tk()
root.title("–ú–æ–Ω—ñ—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å—ñ–≤")
root.geometry("400x250")
root.configure(bg="#2c3e50")

gpu_label = Label(root, text=f"üîπ –í—ñ–¥–µ–æ–∫–∞—Ä—Ç–∞: {get_gpu_info()}", fg="white", bg="#2c3e50", font=("Arial", 12))
gpu_label.pack(pady=5)

os_label = Label(root, text=f"üîπ –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {get_os_info()}", fg="white", bg="#2c3e50", font=("Arial", 12))
os_label.pack(pady=5)

ram_label = Label(root, text="üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM: –û–Ω–æ–≤–ª–µ–Ω–Ω—è...", fg="white", bg="#2c3e50", font=("Arial", 12))
ram_label.pack(pady=5)

uptime_label = Label(root, text="‚è≥ –ß–∞—Å —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏: –û–Ω–æ–≤–ª–µ–Ω–Ω—è...", fg="white", bg="#2c3e50", font=("Arial", 12))
uptime_label.pack(pady=5)

author_label = Label(root, text="–í–∏–∫–æ–Ω–∞–≤ –ü–µ—Ç—Ä—É—Å—å –í–ª–∞–¥–∏—Å–ª–∞–≤", fg="white", bg="#2c3e50", font=("Arial", 10))
author_label.pack(pady=10)

update_info()
root.mainloop()
