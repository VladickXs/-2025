import subprocess
import platform
import os
import time
import tkinter as tk
from tkinter import Label
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from datetime import datetime

import sys
try:
    import matplotlib.pyplot as plt
except ImportError:
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "matplotlib"])
    import matplotlib.pyplot as plt

# Функція для отримання використання пам'яті
def get_ram_usage():
    try:
        output = subprocess.check_output(
            'wmic OS get FreePhysicalMemory,TotalVisibleMemorySize /format:list',
            shell=True
        ).decode().split("\n")
        free_mem = total_mem = 0
        for line in output:
            if "FreePhysicalMemory" in line:
                free_mem = int(line.split("=")[1]) // 1024
            elif "TotalVisibleMemorySize" in line:
                total_mem = int(line.split("=")[1]) // 1024
        used_mem = total_mem - free_mem
        return used_mem, total_mem
    except Exception:
        return 0, 0

# Функція для отримання інформації про відеокарту
def get_gpu_info():
    try:
        output = subprocess.check_output("wmic path Win32_VideoController get Name", shell=True).decode().strip().split("\n")
        return output[1].strip() if len(output) > 1 else "Невідомо"
    except Exception:
        return "Невідомо"

# Функція для отримання інформації про операційну систему
def get_os_info():
    return platform.system() + " " + platform.release()

# Функція для отримання часу роботи системи
def get_system_uptime():
    try:
        output = subprocess.check_output("wmic os get LastBootUpTime", shell=True).decode().strip().split("\n")
        boot_time = output[1].strip()[:14] if len(output) > 1 else ""
        if boot_time:
            boot_dt = datetime.strptime(boot_time, "%Y%m%d%H%M%S")
            uptime = (datetime.now() - boot_dt).total_seconds() // 3600
            return int(uptime)
        return 0
    except Exception:
        return 0

# Функція для отримання інформації про процесор
def get_cpu_info():
    try:
        output = subprocess.check_output("wmic cpu get Name", shell=True).decode().strip().split("\n")
        return output[1].strip() if len(output) > 1 else "Невідомо"
    except Exception:
        return "Невідомо"

# Функція для отримання поточного часу
def get_current_time():
    return datetime.now().strftime("%H:%M:%S")

# Оновлення віджетів і графіку
def update_info():
    used_ram, total_ram = get_ram_usage()
    uptime = get_system_uptime()
    current_time = get_current_time()
    
    ram_label.config(text=f" Використання RAM: {used_ram} МБ / {total_ram} МБ")
    uptime_label.config(text=f" Час роботи системи: {uptime} годин")
    time_label.config(text=f" Поточний час: {current_time}")
    cpu_label.config(text=f" Процесор: {get_cpu_info()}")
    
    # Оновлення графіку
    ram_usage.append(used_ram)
    time_stamps.append(current_time)
    if len(ram_usage) > 60:
        ram_usage.pop(0)
        time_stamps.pop(0)
    
    ax.clear()
    ax.plot(time_stamps, ram_usage, label="Використання RAM")
    ax.set_title("Використання RAM в реальному часі")
    ax.set_xlabel("Час")
    ax.set_ylabel("МБ")
    ax.legend()
    
    canvas.draw()
    
    root.after(1000, update_info)

# Ініціалізація Tkinter вікна
root = tk.Tk()
root.title("Монітор ресурсів")
root.geometry("600x400")
root.configure(bg="#2c3e50")

# Додавання текстових міток
gpu_label = Label(root, text=f" Відеокарта: {get_gpu_info()}", fg="white", bg="#2c3e50", font=("Arial", 12))
gpu_label.pack(pady=5)

os_label = Label(root, text=f" Операційна система: {get_os_info()}", fg="white", bg="#2c3e50", font=("Arial", 12))
os_label.pack(pady=5)

cpu_label = Label(root, text=f" Процесор: {get_cpu_info()}", fg="white", bg="#2c3e50", font=("Arial", 12))
cpu_label.pack(pady=5)

ram_label = Label(root, text=" Використання RAM: Оновлення...", fg="white", bg="#2c3e50", font=("Arial", 12))
ram_label.pack(pady=5)

uptime_label = Label(root, text=" Час роботи системи: Оновлення...", fg="white", bg="#2c3e50", font=("Arial", 12))
uptime_label.pack(pady=5)

time_label = Label(root, text=" Поточний час: Оновлення...", fg="white", bg="#2c3e50", font=("Arial", 12))
time_label.pack(pady=5)

author_label = Label(root, text="Виконав Петрусь Владислав", fg="white", bg="#2c3e50", font=("Arial", 10))
author_label.pack(pady=10)

# Підготовка графіка
fig, ax = plt.subplots(figsize=(5, 3), dpi=100)
ax.set_title("Використання RAM в реальному часі")
ax.set_xlabel("Час")
ax.set_ylabel("МБ")

ram_usage = []
time_stamps = []

# Вставка графіка в Tkinter вікно
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack(pady=20)

update_info()
root.mainloop()
